generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String     @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  role           UserRole   @default(USER)
  properties     Property[] // Properties listed by the user
  favorites      Property[] @relation("UserFavorites")
  reviews        Review[]
  applications   RentalApplication[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id             String   @id @default(cuid())
  title          String
  description    String   @db.Text
  price          Float
  bedrooms       Int
  bathrooms      Float
  sqft           Float
  address        String
  city           String
  state          String
  zipCode        String
  latitude       Float?
  longitude      Float?
  images         String[]
  featured       Boolean  @default(false)
  available      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  propertyType   String
  amenities      String[]
  listingType    ListingType
  listingStatus  ListingStatus @default(ACTIVE)

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoredBy     User[]            @relation("UserFavorites")
  reviews       Review[]
  applications  RentalApplication[]
  maintenanceRequests MaintenanceRequest[]

  @@index([city])
  @@index([state])
  @@index([zipCode])
  @@index([available])
  @@index([listingType])
  @@index([listingStatus])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  propertyId  String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([userId])
}

model RentalApplication {
  id          String   @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  propertyId  String
  income      Float
  creditScore Int?
  message     String?  @db.Text
  documents   String[] // URLs to uploaded documents

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([userId])
  @@index([status])
}

model MaintenanceRequest {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  status      MaintenanceStatus @default(PENDING)
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  propertyId  String
  
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([status])
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

enum ListingType {
  SALE
  RENT
  SOLD
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  EXPIRED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

